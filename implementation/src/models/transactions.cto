/** 
 * See lib/logic.js for a complete description of the behaviour of each transaction.
 */
namespace eu.sardcoin.transactions

import eu.sardcoin.participants.*
import eu.sardcoin.assets.*



transaction DeleteCoupon {
  --> Coupon coupon
  --> Producer caller
}

/*
transaction AssignAction {
  --> Action action
  --> Executor executor optional
  --> Verifier verifier optional
  --> Producer caller
}

transaction AcceptAction {
  --> Action action
  --> Executor exCaller optional
  --> Verifier verCaller optional
}

transaction RejectAction {
  --> Action action
  --> Executor exCaller optional
  --> Verifier verCaller optional
}

transaction ExecuteAction {
  --> Action action
  --> Executor caller
  o String hashExecutionDocuments
}

transaction ExApproveAction {
  --> Action action
  --> ExCoordinator caller
  o Boolean approvalResult
  o String hashExApprovalDocuments
}

transaction VerifyAction {
  --> Action action
  --> Verifier caller
  o Boolean approvalResult
  o String hashVerificationDocuments
}

transaction VerApproveAction {
  --> Action action
  --> VerCoordinator caller
  o Boolean approvalResult
  o Boolean deleteAction
  o String hashVerApprovalDocuments
}

transaction RestoreAction{
  --> Action action
  --> Producer caller
  o Boolean choice
}

transaction InspectAction {
  --> Action action
  --> Inspector caller
  o Boolean approvalResult
  o Boolean deleteAction
  o String hashInspectionDocuments
}

transaction SubmitAction {
  --> Action action
  --> Producer caller
}

transaction ReviewAction {
  --> Action action
  --> Producer caller
  o Boolean approvalResult
  o Boolean completeAction
}

transaction PayAction {
  --> Action action
  --> Producer caller
  --> Executor exReceiver optional
  --> Verifier verReceiver optional
  o String hashPayment
}

transaction CompleteAction {
  --> Action action
  --> Producer caller
}

transaction SubstituteExecutor {
  --> Action action
  --> Executor executor
  --> Producer caller
}




transaction AssignTask {
  --> Task task
  --> Producer caller
  --> ExCoordinator exCoordinator optional
  --> VerCoordinator verCoordinator optional
  --> Inspector inspector optional
}

transaction AddAction {
  --> Task task
  --> Producer caller
  --> Action action
}

transaction AddExCoordinatorDetails {
  --> Task task
  --> Producer caller
  o DateTime deadline
  --> Reward reward
}

transaction AddVerCoordinatorDetails {
  --> Task task
  --> Producer caller
  o DateTime deadline
  --> Reward reward
}

transaction AddInspectorDetails {
  --> Task task
  --> Producer caller
  o DateTime deadline
  --> Reward reward
}

transaction AcceptTask {
  --> Task task
  --> ExCoordinator exCaller optional
  --> VerCoordinator verCaller optional
  --> Inspector insCaller optional
}

transaction RejectTask {
  --> Task task
  --> ExCoordinator exCaller optional
  --> VerCoordinator verCaller optional
  --> Inspector insCaller optional
}

transaction AcceptDeadlineExpired{
  --> Task task
}

transaction RestoreTask{
  --> Task task
  --> Producer caller
  o Boolean choice
}

transaction SubmitTask {
  --> Task task
  --> Producer caller
  o String hashDocumentsSubmitted
}

transaction ReviewTask {
  --> Task task
  --> Customer caller
  o Boolean approvalResult
}

transaction PayTask {
  --> Task task
  --> Producer caller
  --> ExCoordinator exReceiver optional
  --> VerCoordinator verReceiver optional
  --> Inspector insReceiver optional
  o String hashPayment
}

transaction CompleteTask {
  --> Task task
  --> Producer caller
}

transaction AssignPenalties {
  --> Task task
}




transaction AddTask {
  --> Service service
  --> Producer caller
  --> Task task
}

*/